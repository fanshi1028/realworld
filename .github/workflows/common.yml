name: common

on:
  workflow_call:
    inputs:
      exe:
        description: backend or frontend
        required: true
        type: string
      flag:
        description: in-mem, rel8 or vty
        required: true
        type: string
    secrets:
      CACHIX_AUTH_TOKEN:
        description: cachix token

jobs:
  nix-build:
    strategy:
      fail-fast: false
      matrix:
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
        os: [ubuntu-20.04]
        # https://github.com/input-output-hk/haskell.nix/blob/85755332c0698ab90d061c079f3c25710675bb85/docs/reference/supported-ghc-versions.md
        nixpkgsPin: [unstable]
        # NOTE: won't build on ghc921 yet
        ghcVersion: [8107]
        optimize: [0, "\"\"", 1, 2]

    runs-on: ${{matrix.os}}

    steps:
    - uses: actions/checkout@v2

    - uses: cachix/install-nix-action@v16
      with:
        extra_nix_config: |
          substituters = https://cache.nixos.org https://hydra.iohk.io
          trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=

    - uses: cachix/cachix-action@v10
      with:
        name: fanshi1028-realworld-haskell
        authToken: ${{secrets.CACHIX_AUTH_TOKEN}}
        extraPullNames: nix-community
        skipPush: true

    - name: nix build
      # NOTE: avoid memory explode for this case
      if: ${{matrix.os == 'ubuntu-20.04' && inputs.flag == 'in-mem'}}
      run: |
        nix-build -j4 --argstr nixpkgsPin ${{matrix.nixpkgsPin}} \
        --argstr ghcVersion ${{matrix.ghcVersion}} \
        --argstr exeFlag ${{inputs.exe}}-${{inputs.flag}} \
        --arg optimize ${{matrix.optimize}} \
        --arg ghcOptions ["-v2"] \
        --arg materializedDir null \
        --arg checkMaterialization false \
        -A realworld-haskell.components.exes.${{inputs.exe}}

    # - name: nix shell
    #   if: ${{matrix.os}} == macos-10.15 && ${{matrix.ghcVersion}} == 8107
    #   run: |
    #     nix-shell -j4 --argstr nixpkgsPin ${{matrix.nixpkgsPin}} \
    #     --argstr ghc-version ${{matrix.ghcVersion}} \
    #     --arg materializedDir null \
    #     --arg checkMaterialization false
